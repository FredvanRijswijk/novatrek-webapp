{
  "version": 3,
  "sources": ["../src/background.ts"],
  "sourcesContent": ["// Background service worker for NovaTrek Safari extension\n\n// Safari uses browser API instead of chrome API\ndeclare const browser: any;\nconst chrome = typeof browser !== 'undefined' ? browser : (window as any).chrome;\n\ninterface CaptureData {\n  url: string;\n  title: string;\n  selectedText?: string;\n  linkUrl?: string;\n  imageUrl?: string;\n  type: 'page' | 'text' | 'link' | 'image';\n}\n\n// Listen for tab updates to inject content script if needed\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url) {\n    const url = new URL(tab.url);\n    // Check if it's our extension-auth page\n    if ((url.hostname === 'localhost' || url.hostname === 'novatrek.app') && \n        url.pathname === '/extension-auth') {\n      chrome.scripting.executeScript({\n        target: { tabId: tabId },\n        files: ['content.js']\n      }).catch(err => console.error('Failed to inject content script:', err));\n    }\n  }\n});\n\n// Create context menu items\nchrome.runtime.onInstalled.addListener(() => {\n  // Save entire page\n  chrome.contextMenus.create({\n    id: 'save-page',\n    title: 'Save page to NovaTrek',\n    contexts: ['page']\n  });\n\n  // Save selected text\n  chrome.contextMenus.create({\n    id: 'save-selection',\n    title: 'Save \"%s\" to NovaTrek',\n    contexts: ['selection']\n  });\n\n  // Save link\n  chrome.contextMenus.create({\n    id: 'save-link',\n    title: 'Save link to NovaTrek',\n    contexts: ['link']\n  });\n\n  // Save image\n  chrome.contextMenus.create({\n    id: 'save-image',\n    title: 'Save image to NovaTrek',\n    contexts: ['image']\n  });\n});\n\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  if (!tab?.url || !tab?.title) return;\n\n  let captureData: CaptureData = {\n    url: tab.url,\n    title: tab.title,\n    type: 'page'\n  };\n\n  switch (info.menuItemId) {\n    case 'save-selection':\n      captureData.selectedText = info.selectionText;\n      captureData.type = 'text';\n      break;\n    case 'save-link':\n      captureData.linkUrl = info.linkUrl;\n      captureData.type = 'link';\n      break;\n    case 'save-image':\n      captureData.imageUrl = info.srcUrl;\n      captureData.type = 'image';\n      break;\n  }\n\n  saveToNovaTrek(captureData);\n});\n\n// Handle messages from popup or content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'save') {\n    saveToNovaTrek(request.data);\n    sendResponse({ success: true });\n  } else if (request.action === 'getAuthStatus') {\n    getAuthStatus().then(sendResponse);\n    return true; // Keep message channel open for async response\n  } else if (request.action === 'authTokenReceived') {\n    // Store the auth token received from content script\n    chrome.storage.local.set({ \n      authToken: request.token,\n      userId: request.userId\n    }).then(() => {\n      sendResponse({ success: true });\n      \n      // Close the auth tab\n      if (sender.tab?.id) {\n        chrome.tabs.remove(sender.tab.id);\n      }\n    });\n    return true; // Keep message channel open for async response\n  }\n});\n\n// Save data to NovaTrek\nasync function saveToNovaTrek(data: CaptureData) {\n  try {\n    // Get auth token and user ID from storage\n    const { authToken, userId } = await chrome.storage.local.get(['authToken', 'userId']);\n    \n    if (!authToken || !userId) {\n      // Open popup to prompt login\n      chrome.action.openPopup();\n      return;\n    }\n\n    // Show saving notification\n    chrome.action.setBadgeText({ text: '...' });\n    chrome.action.setBadgeBackgroundColor({ color: '#FFA500' });\n\n    // Prepare request body\n    const requestBody: any = {\n      content: data.url || data.selectedText || data.linkUrl || data.imageUrl || '',\n      contentType: data.type === 'page' ? 'link' : data.type,\n      source: 'browser-extension',\n      sourceUrl: data.url,\n      title: data.title,\n      capturedAt: new Date().toISOString()\n    };\n\n    // Only add notes if there's selected text\n    if (data.selectedText) {\n      requestBody.notes = data.selectedText;\n    }\n\n    console.log('Sending capture to API:', requestBody);\n\n    // Send to API\n    // Use production URL for Safari extension\n    const apiUrl = process.env.NODE_ENV === 'development' \n      ? 'http://localhost:3000/api/captures-simple'\n      : 'https://novatrek.app/api/captures-simple';\n      \n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`,\n        'X-User-Id': userId // Temporary until we implement proper token verification\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (response.ok) {\n      // Success\n      chrome.action.setBadgeText({ text: '\u2713' });\n      chrome.action.setBadgeBackgroundColor({ color: '#00D000' });\n      \n      // Clear badge after 2 seconds\n      setTimeout(() => {\n        chrome.action.setBadgeText({ text: '' });\n      }, 2000);\n\n      // Show notification\n      chrome.notifications.create({\n        type: 'basic',\n        iconUrl: 'icon-128.png',  // Safari requires PNG icons\n        title: 'Saved to NovaTrek!',\n        message: `${data.title || 'Content'} has been saved to your travel inbox`\n      });\n    } else {\n      const errorText = await response.text();\n      console.error('API Error Response:', response.status, errorText);\n      throw new Error(`API Error: ${response.status} - ${errorText}`);\n    }\n  } catch (error) {\n    // Error\n    chrome.action.setBadgeText({ text: '!' });\n    chrome.action.setBadgeBackgroundColor({ color: '#FF0000' });\n    \n    setTimeout(() => {\n      chrome.action.setBadgeText({ text: '' });\n    }, 2000);\n\n    console.error('Failed to save to NovaTrek:', error);\n  }\n}\n\n// Check authentication status\nasync function getAuthStatus(): Promise<{ isAuthenticated: boolean; user?: any }> {\n  const { authToken, userId } = await chrome.storage.local.get(['authToken', 'userId']);\n  \n  if (!authToken) {\n    return { isAuthenticated: false };\n  }\n\n  // For now, just check if token exists\n  // Skip the API call which might be failing\n  return { \n    isAuthenticated: true, \n    user: { uid: userId }\n  };\n\n  // TODO: Re-enable API verification once we debug the issue\n  /*\n  try {\n    console.log('Calling /api/auth/me...');\n    const response = await fetch('http://localhost:3000/api/auth/me', {\n      headers: {\n        'Authorization': `Bearer ${authToken}`\n      }\n    });\n\n    console.log('Response status:', response.status);\n    if (response.ok) {\n      const data = await response.json();\n      console.log('Auth response:', data);\n      return { isAuthenticated: data.authenticated, user: data.user };\n    } else {\n      console.error('API returned error:', response.status, await response.text());\n    }\n  } catch (error) {\n    console.error('Auth check error:', error);\n  }\n\n  return { isAuthenticated: false };\n  */\n}"],
  "mappings": "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",
  "names": []
}
