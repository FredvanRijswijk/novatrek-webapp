rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // === Helper Functions ===
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function ownsTrip(tripId) {
      let trip = get(/databases/$(database)/documents/trips/$(tripId)).data;
      return request.auth != null && (
        trip.userId == request.auth.uid ||
        trip.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
    }
    
    function canAccessTrip(tripId) {
      let trip = get(/databases/$(database)/documents/trips/$(tripId)).data;
      return request.auth != null && (
        // Owner
        trip.userId == request.auth.uid ||
        trip.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Shared with user
        request.auth.uid in trip.sharedWith ||
        // Public share link exists
        exists(/databases/$(database)/documents/tripShares/$(tripId))
      );
    }
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.isActive == true;
    }

    // === Main Trip Document ===
    match /trips/{tripId} {
      allow read: if canAccessTrip(tripId) || isAdmin();
      
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      
      allow update: if ownsTrip(tripId);
      allow delete: if ownsTrip(tripId);
      
      // === Days Subcollection ===
      match /days/{dayId} {
        allow read: if canAccessTrip(tripId);
        allow write: if ownsTrip(tripId);
        
        // === Activities Sub-subcollection ===
        match /activities/{activityId} {
          allow read: if canAccessTrip(tripId);
          allow write: if ownsTrip(tripId);
        }
        
        // === Accommodations Sub-subcollection ===
        match /accommodations/{accommodationId} {
          allow read: if canAccessTrip(tripId);
          allow write: if ownsTrip(tripId);
        }
        
        // === Transportation Sub-subcollection ===
        match /transportation/{transportId} {
          allow read: if canAccessTrip(tripId);
          allow write: if ownsTrip(tripId);
        }
      }
      
      // === Expenses Subcollection ===
      match /expenses/{expenseId} {
        allow read: if canAccessTrip(tripId);
        allow write: if ownsTrip(tripId);
      }
      
      // === AI Recommendations Subcollection ===
      match /ai_recommendations/{recommendationId} {
        allow read: if canAccessTrip(tripId);
        allow write: if ownsTrip(tripId);
      }
    }
    
    // === Collection Group Queries ===
    // Allow querying across all activities/accommodations/etc for a user
    match /{path=**}/activities/{activityId} {
      allow read: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /{path=**}/accommodations/{accommodationId} {
      allow read: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /{path=**}/transportation/{transportId} {
      allow read: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /{path=**}/expenses/{expenseId} {
      allow read: if request.auth != null && 
        resource.data.paidBy == request.auth.uid;
    }
    
    // === Users Collection (unchanged) ===
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
      
      // Webhook updates for subscriptions
      allow write: if request.resource.data.keys().hasAll(['subscription', 'updatedAt']) 
        && request.resource.data.keys().size() <= 3;
        
      // Payments subcollection
      match /payments/{paymentId} {
        allow read: if isOwner(userId);
        allow write: if true; // For webhook writes
      }
    }
    
    // === Travel Preferences ===
    match /travelPreferences/{userId} {
      allow read, write: if isOwner(userId);
      allow delete: if false; // Prevent accidental deletion
    }
    
    // === Chat Collections ===
    match /chat_sessions/{sessionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        (resource.data.tripId != null && ownsTrip(resource.data.tripId))
      );
    }
    
    match /chat_messages/{messageId} {
      allow read: if request.auth != null;
      allow get: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        (resource.data.tripId != null && canAccessTrip(resource.data.tripId))
      );
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      allow update: if false; // Messages are immutable
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        (resource.data.tripId != null && ownsTrip(resource.data.tripId))
      );
    }
    
    match /chat_memories/{memoryId} {
      allow read: if request.auth != null;
      allow get: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        (resource.data.tripRef != null && 
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      allow create: if request.auth != null && 
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      allow update: if request.auth != null && 
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      allow delete: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        (resource.data.tripRef != null && ownsTrip(resource.data.tripId))
      );
    }
    
    // === Other Collections ===
    // Include all other collections from the original rules file
    // (packing_lists, flights, travel_segments, tripShares, marketplace_*, etc.)
    // ... (copy remaining rules from original file)
  }
}