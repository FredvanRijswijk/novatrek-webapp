rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user owns an expert profile
    function userOwnsExpert(userId, expertRef) {
      return expertRef is path && 
             get(expertRef).data.userId == userId;
    }
    
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.isActive == true;
    }

    // Users collection - supports both patterns
    match /users/{userId} {
      allow read: if request.auth != null && (
        // Users can read their own data
        request.auth.uid == userId ||
        // Admins can read all users
        isAdmin()
      );
      
      // Allow authenticated users to create their own user document
      allow create: if request.auth != null && request.auth.uid == userId;
      
      allow update: if request.auth != null && (
        // Users can update their own data
        request.auth.uid == userId ||
        // Admins can update users
        isAdmin()
      );
      
      allow delete: if request.auth != null && (
        // Users can delete their own data
        request.auth.uid == userId ||
        // Admins can delete users
        isAdmin()
      );
      
      // Allow webhook updates to subscription data (for development)
      allow write: if request.resource.data.keys().hasAll(['subscription', 'updatedAt']) 
        && request.resource.data.keys().size() <= 3;
        
      // Allow payments subcollection writes (for webhooks)
      match /payments/{paymentId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if true; // For webhook writes in development
      }
    }
    
    // Admin users collection
    match /admin_users/{adminId} {
      allow read: if request.auth != null && (
        // Admins can read their own record
        request.auth.uid == adminId ||
        // Super admins can read all admin records
        (exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'super_admin')
      );
      
      // Only super admins can write to admin records
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    // Travel Preferences - supports both patterns
    match /travelPreferences/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }
    
    // Trips - supports both userId and userRef patterns
    match /trips/{tripId} {
      allow read: if 
        // Authenticated users can read their own trips (legacy userId)
        (request.auth != null && resource.data.userId == request.auth.uid) ||
        // Authenticated users can read their own trips (new userRef)
        (request.auth != null && resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Anyone can read if a share document exists (public share link)
        exists(/databases/$(database)/documents/tripShares/$(tripId)) ||
        // Admin access
        (request.auth != null && isAdmin());
      
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
    }
    
    // Chat Messages with References - supports both patterns
    match /chat_messages/{messageId} {
      // Allow authenticated users to query/list their messages
      allow read: if request.auth != null;
      
      // Allow get if user owns the message or the associated trip
      allow get: if request.auth != null && (
        // Legacy: String userId
        request.auth.uid == resource.data.userId ||
        // New: User reference
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Can read if part of the trip (legacy)
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid) ||
        // Can read if part of the trip (new)
        (resource.data.tripRef != null &&
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        (request.resource.data.userRef != null &&
         request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      // Messages are immutable (no updates allowed)
      allow update: if false;
      
      // Allow users to delete their own messages or messages for their trips
      allow delete: if request.auth != null && (
        // Legacy: String userId
        request.auth.uid == resource.data.userId ||
        // New: User reference
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Can delete if owns the trip (legacy)
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid) ||
        // Can delete if owns the trip (new)
        (resource.data.tripRef != null &&
         exists(resource.data.tripRef) &&
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
    }
    
    // Chat Sessions - supports both patterns
    match /chat_sessions/{sessionId} {
      // Allow authenticated users to query their sessions
      allow read: if request.auth != null;
      
      // Allow operations on owned sessions
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        (request.resource.data.userRef != null &&
         request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      // Allow deletion if user owns the session or the associated trip
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Can delete if owns the trip
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid) ||
        (resource.data.tripRef != null &&
         exists(resource.data.tripRef) &&
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
    }
    
    // Packing Lists with References only
    match /packing_lists/{listId} {
      // Allow read if authenticated - needed for queries
      allow read: if request.auth != null;
      
      // Allow list/get if user owns the packing list or the associated trip
      allow get: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Also allow if the user owns the trip associated with this packing list
        (resource.data.tripRef != null && 
         exists(resource.data.tripRef) && 
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow create: if request.auth != null && 
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      allow update: if request.auth != null && 
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      // Allow deletion if user owns the list or the associated trip
      allow delete: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Also allow if the user owns the trip
        (resource.data.tripRef != null && 
         exists(resource.data.tripRef) && 
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Legacy tripId support
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid)
      );
    }
    
    // Flights with References only
    match /flights/{flightId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      allow update: if request.auth != null && 
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      // Allow deletion if user owns the flight or the associated trip
      allow delete: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Also allow if the user owns the trip
        (resource.data.tripRef != null && 
         exists(resource.data.tripRef) && 
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Legacy tripId support
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid)
      );
    }
    
    // Travel Segments with References only
    match /travel_segments/{segmentId} {
      // Allow read if authenticated - needed for queries
      allow read: if request.auth != null;
      
      // Allow get if user owns the segment or the associated trip
      allow get: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Also allow if the user owns the trip associated with this segment
        (resource.data.tripRef != null && 
         exists(resource.data.tripRef) && 
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow create: if request.auth != null && 
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      allow update: if request.auth != null && 
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      // Allow deletion if user owns the segment or the associated trip
      allow delete: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Also allow if the user owns the trip
        (resource.data.tripRef != null && 
         exists(resource.data.tripRef) && 
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Legacy tripId support
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid)
      );
    }
    
    // Trip Shares with References - supports both patterns
    match /tripShares/{shareId} {
      // Allow anyone to read trip shares (they need the unique token to access)
      // This enables public share links to work without authentication
      allow read: if true;
      
      allow create: if request.auth != null && (
        // Must own the trip being shared
        (request.resource.data.ownerId == request.auth.uid) ||
        (request.resource.data.ownerRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow update: if request.auth != null && (
        resource.data.ownerId == request.auth.uid ||
        (resource.data.ownerRef != null &&
         resource.data.ownerRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow delete: if request.auth != null && (
        resource.data.ownerId == request.auth.uid ||
        (resource.data.ownerRef != null &&
         resource.data.ownerRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
    }
    
    // Marketplace Experts - supports both patterns
    match /marketplace_experts/{expertId} {
      allow read: if true; // Public profiles
      
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.isApproved == false;
      
      allow update: if request.auth != null && (
        // Expert can update their own profile
        request.auth.uid == resource.data.userId ||
        // Admin can approve experts
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Marketplace Products with Reference Support
    match /marketplace_products/{productId} {
      allow read: if true; // Public products
      
      allow create: if request.auth != null && (
        // Legacy: Check string expertId
        (request.resource.data.expertId != null &&
         get(/databases/$(database)/documents/marketplace_experts/$(request.resource.data.expertId)).data.userId == request.auth.uid) ||
        // New: Check expertRef reference
        (request.resource.data.expertRef != null &&
         userOwnsExpert(request.auth.uid, request.resource.data.expertRef))
      );
      
      allow update: if request.auth != null && (
        // Legacy: Check string expertId
        (resource.data.expertId != null &&
         get(/databases/$(database)/documents/marketplace_experts/$(resource.data.expertId)).data.userId == request.auth.uid) ||
        // New: Check expertRef reference
        (resource.data.expertRef != null &&
         userOwnsExpert(request.auth.uid, resource.data.expertRef)) ||
        // Admin access
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow delete: if request.auth != null && (
        // Legacy: Check string expertId
        (resource.data.expertId != null &&
         get(/databases/$(database)/documents/marketplace_experts/$(resource.data.expertId)).data.userId == request.auth.uid) ||
        // New: Check expertRef reference
        (resource.data.expertRef != null &&
         userOwnsExpert(request.auth.uid, resource.data.expertRef)) ||
        // Admin access
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    // Marketplace Transactions with Reference Support
    match /marketplace_transactions/{transactionId} {
      allow read: if request.auth != null && (
        // Legacy: String IDs
        request.auth.uid == resource.data.buyerId ||
        request.auth.uid == resource.data.sellerId ||
        // New: Reference fields - buyer can read their own transactions
        (resource.data.buyerRef != null && 
         resource.data.buyerRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // New: Expert can read transactions for their products
        (resource.data.expertRef != null &&
         userOwnsExpert(request.auth.uid, resource.data.expertRef)) ||
        // Admin access
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow create: if request.auth != null && (
        // Legacy: buyerId must match auth user
        (request.resource.data.buyerId == request.auth.uid) ||
        // New: buyerRef must point to auth user
        (request.resource.data.buyerRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      // Transactions are immutable except for status updates by system
      allow update: if false;
      allow delete: if false;
    }
    
    // Marketplace Reviews with Reference Support
    match /marketplace_reviews/{reviewId} {
      allow read: if true; // Public reviews
      
      allow create: if request.auth != null && (
        // Must be the buyer (legacy string ID)
        request.resource.data.buyerId == request.auth.uid ||
        // Must be the buyer (new reference)
        (request.resource.data.buyerRef != null &&
         request.resource.data.buyerRef == /databases/$(database)/documents/users/$(request.auth.uid))
      ) && 
      // Must have purchased the product
      exists(/databases/$(database)/documents/marketplace_transactions/$(request.resource.data.transactionId));
      
      allow update: if request.auth != null && (
        // Legacy: Original reviewer only
        resource.data.buyerId == request.auth.uid ||
        // New: Original reviewer via reference
        (resource.data.buyerRef != null &&
         resource.data.buyerRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow delete: if request.auth != null && (
        // Reviewer can delete their own review
        resource.data.buyerId == request.auth.uid ||
        (resource.data.buyerRef != null &&
         resource.data.buyerRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Admin can delete any review
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    // Marketplace Applications
    match /marketplace_applications/{applicationId} {
      allow read: if request.auth != null && (
        // Applicant can read their own application
        request.auth.uid == resource.data.userId ||
        // Admin can read all applications
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending';
      
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow delete: if false;
    }
    
    // Place Recommendations
    match /place_recommendations/{recommendationId} {
      allow read: if true; // Public recommendations
      
      allow create: if request.auth != null && (
        // Expert creating recommendation
        (request.resource.data.recommendedBy.type == 'expert' &&
         exists(/databases/$(database)/documents/marketplace_experts/$(request.resource.data.recommendedBy.id)) &&
         get(/databases/$(database)/documents/marketplace_experts/$(request.resource.data.recommendedBy.id)).data.userId == request.auth.uid) ||
        // Admin/system creating recommendation
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow update: if request.auth != null && (
        // Expert updating their own recommendation
        (resource.data.recommendedBy.type == 'expert' &&
         resource.data.recommendedBy.id != null &&
         get(/databases/$(database)/documents/marketplace_experts/$(resource.data.recommendedBy.id)).data.userId == request.auth.uid) ||
        // Admin access
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Expert Saved Places
    match /expert_saved_places/{savedPlaceId} {
      allow read: if request.auth != null && (
        // Expert can read their own saved places
        (resource.data.expertId != null &&
         get(/databases/$(database)/documents/marketplace_experts/$(resource.data.expertId)).data.userId == request.auth.uid) ||
        // Admin access
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      allow create: if request.auth != null &&
        request.resource.data.expertId != null &&
        get(/databases/$(database)/documents/marketplace_experts/$(request.resource.data.expertId)).data.userId == request.auth.uid;
      
      allow update, delete: if request.auth != null &&
        resource.data.expertId != null &&
        get(/databases/$(database)/documents/marketplace_experts/$(resource.data.expertId)).data.userId == request.auth.uid;
    }
    
    // User Saved Recommendations
    match /user_saved_recommendations/{savedId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // Admin Users
    match /admin_users/{adminId} {
      allow read: if request.auth != null && (
        // Admin can read their own record
        request.auth.uid == adminId ||
        // Super admin can read all
        get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'super_admin'
      );
      
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    // Help Articles
    match /help_articles/{articleId} {
      allow read: if true; // Public help articles
      
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Help Categories
    match /help_categories/{categoryId} {
      allow read: if true; // Public categories
      
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Article Feedback
    match /help_feedback/{feedbackId} {
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if false;
    }
    
    // Chat Memories
    match /chat_memories/{memoryId} {
      // Allow authenticated users to query
      allow read: if request.auth != null;
      
      // Allow get if user owns the memory or the associated trip
      allow get: if request.auth != null && (
        // User can read their own memories
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // User can read memories for their trips
        (resource.data.tripRef != null &&
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow create: if request.auth != null && 
        request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      allow update: if request.auth != null && 
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      // Allow deletion if user owns the memory or the associated trip
      allow delete: if request.auth != null && (
        resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Can delete if owns the trip
        (resource.data.tripRef != null &&
         exists(resource.data.tripRef) &&
         get(resource.data.tripRef).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Legacy tripId support
        (resource.data.tripId != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.tripId)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.tripId)).data.userId == request.auth.uid)
      );
    }
    
    // Captures - supports both patterns (userId and userRef)
    match /captures/{captureId} {
      // Allow read if authenticated - needed for queries
      allow read: if request.auth != null;
      
      // Allow get if user owns the capture
      allow get: if request.auth != null && (
        // Legacy: String userId
        request.auth.uid == resource.data.userId ||
        // New: User reference
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)) ||
        // Can read if assigned to user's trip
        (resource.data.assignedTo != null &&
         exists(/databases/$(database)/documents/trips/$(resource.data.assignedTo)) &&
         get(/databases/$(database)/documents/trips/$(resource.data.assignedTo)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow create: if request.auth != null && (
        // Legacy: userId must match
        request.resource.data.userId == request.auth.uid ||
        // New: userRef must point to auth user
        (request.resource.data.userRef != null &&
         request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow update: if request.auth != null && (
        // Legacy: Owner can update
        resource.data.userId == request.auth.uid ||
        // New: Owner via reference can update
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
      
      allow delete: if request.auth != null && (
        // Legacy: Owner can delete
        resource.data.userId == request.auth.uid ||
        // New: Owner via reference can delete
        (resource.data.userRef != null &&
         resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid))
      );
    }
    
    // Error Logs (admin only)
    match /errorLogs/{logId} {
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
    
    // Webhook Events (for idempotency)
    match /webhook_events/{eventId} {
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow webhooks to create (no auth required for webhook endpoints)
      allow create: if true;
      allow update, delete: if false;
    }
    
    // Email Tracking (for idempotency)
    match /email_tracking/{trackingId} {
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow webhooks to create (no auth required for webhook endpoints)
      allow create: if true;
      allow update, delete: if false;
    }
    
    // Expert Recommendations
    match /expertRecommendations/{recommendationId} {
      allow read: if true; // Public recommendations
      
      allow create: if request.auth != null && (
        // Expert creating recommendation
        exists(/databases/$(database)/documents/marketplace_experts/$(request.auth.uid)) ||
        // Admin creating recommendation
        isAdmin()
      );
      
      allow update: if request.auth != null && (
        // Expert updating their own recommendation
        (resource.data.expertId == request.auth.uid &&
         exists(/databases/$(database)/documents/marketplace_experts/$(request.auth.uid))) ||
        // Admin access
        isAdmin()
      );
      
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Activities (NovaTrek curated activities)
    match /activities/{activityId} {
      allow read: if true; // Public activities
      
      allow create, update: if request.auth != null && (
        // Experts can create/update activities
        exists(/databases/$(database)/documents/marketplace_experts/$(request.auth.uid)) ||
        // Admin access
        isAdmin()
      );
      
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Trip Days subcollection
    match /trips/{tripId}/days/{dayId} {
      allow read: if request.auth != null && (
        // User owns the parent trip (legacy userId)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
        // User owns the parent trip (new userRef)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Admin access
        isAdmin()
      );
      
      allow create, update, delete: if request.auth != null && (
        // User owns the parent trip (legacy userId)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
        // User owns the parent trip (new userRef)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
      
      // Activities sub-subcollection
      match /activities/{activityId} {
        allow read: if request.auth != null && (
          // User owns the parent trip (legacy userId)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
          // User owns the parent trip (new userRef)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
          // Admin access
          isAdmin()
        );
        
        allow create, update, delete: if request.auth != null && (
          // User owns the parent trip (legacy userId)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
          // User owns the parent trip (new userRef)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
        );
      }
      
      // Accommodations sub-subcollection
      match /accommodations/{accommodationId} {
        allow read: if request.auth != null && (
          // User owns the parent trip (legacy userId)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
          // User owns the parent trip (new userRef)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
          // Admin access
          isAdmin()
        );
        
        allow create, update, delete: if request.auth != null && (
          // User owns the parent trip (legacy userId)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
          // User owns the parent trip (new userRef)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
        );
      }
      
      // Transportation sub-subcollection
      match /transportation/{transportId} {
        allow read: if request.auth != null && (
          // User owns the parent trip (legacy userId)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
          // User owns the parent trip (new userRef)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
          // Admin access
          isAdmin()
        );
        
        allow create, update, delete: if request.auth != null && (
          // User owns the parent trip (legacy userId)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
          // User owns the parent trip (new userRef)
          get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
        );
      }
    }
    
    // Trip Expenses subcollection
    match /trips/{tripId}/expenses/{expenseId} {
      allow read: if request.auth != null && (
        // User owns the parent trip (legacy userId)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
        // User owns the parent trip (new userRef)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        // Admin access
        isAdmin()
      );
      
      allow create, update, delete: if request.auth != null && (
        // User owns the parent trip (legacy userId)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
        // User owns the parent trip (new userRef)
        get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
    }
    
    // Trip Collaborators subcollection
    match /trips/{tripId}/collaborators/{collaboratorId} {
      allow read: if request.auth != null && (
        // User owns the parent trip or is a collaborator
        get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid) ||
        resource.data.userId == request.auth.uid ||
        // Admin access
        isAdmin()
      );
      
      allow create, update, delete: if request.auth != null && (
        // Only trip owner can manage collaborators
        get(/databases/$(database)/documents/trips/$(tripId)).data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/trips/$(tripId)).data.userRef == /databases/$(database)/documents/users/$(request.auth.uid)
      );
    }
    
    // Waitlist collection
    match /waitlist/{entryId} {
      // Allow anyone to read if they know the document ID
      // Authenticated users can read their own entry by email
      // Admins can read all entries
      allow read: if true;
      
      // Anyone can create a waitlist entry (handled by rate limiting in API)
      // Must include required fields
      allow create: if request.resource.data.email is string &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt != null;
      
      // Only admins can update waitlist entries
      allow update: if request.auth != null && isAdmin();
      
      // No one can delete waitlist entries
      allow delete: if false;
    }
  }
}